# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _osmmapmatch
else:
    import _osmmapmatch

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osmmapmatch.delete_SwigPyIterator

    def value(self):
        return _osmmapmatch.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _osmmapmatch.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _osmmapmatch.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _osmmapmatch.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _osmmapmatch.SwigPyIterator_equal(self, x)

    def copy(self):
        return _osmmapmatch.SwigPyIterator_copy(self)

    def next(self):
        return _osmmapmatch.SwigPyIterator_next(self)

    def __next__(self):
        return _osmmapmatch.SwigPyIterator___next__(self)

    def previous(self):
        return _osmmapmatch.SwigPyIterator_previous(self)

    def advance(self, n):
        return _osmmapmatch.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _osmmapmatch.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _osmmapmatch.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _osmmapmatch.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _osmmapmatch.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _osmmapmatch.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _osmmapmatch.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _osmmapmatch:
_osmmapmatch.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _osmmapmatch.SHARED_PTR_DISOWN
class Point2dVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _osmmapmatch.Point2dVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _osmmapmatch.Point2dVector___nonzero__(self)

    def __bool__(self):
        return _osmmapmatch.Point2dVector___bool__(self)

    def __len__(self):
        return _osmmapmatch.Point2dVector___len__(self)

    def __getslice__(self, i, j):
        return _osmmapmatch.Point2dVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _osmmapmatch.Point2dVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _osmmapmatch.Point2dVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _osmmapmatch.Point2dVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _osmmapmatch.Point2dVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _osmmapmatch.Point2dVector___setitem__(self, *args)

    def pop(self):
        return _osmmapmatch.Point2dVector_pop(self)

    def append(self, x):
        return _osmmapmatch.Point2dVector_append(self, x)

    def empty(self):
        return _osmmapmatch.Point2dVector_empty(self)

    def size(self):
        return _osmmapmatch.Point2dVector_size(self)

    def swap(self, v):
        return _osmmapmatch.Point2dVector_swap(self, v)

    def begin(self):
        return _osmmapmatch.Point2dVector_begin(self)

    def end(self):
        return _osmmapmatch.Point2dVector_end(self)

    def rbegin(self):
        return _osmmapmatch.Point2dVector_rbegin(self)

    def rend(self):
        return _osmmapmatch.Point2dVector_rend(self)

    def clear(self):
        return _osmmapmatch.Point2dVector_clear(self)

    def get_allocator(self):
        return _osmmapmatch.Point2dVector_get_allocator(self)

    def pop_back(self):
        return _osmmapmatch.Point2dVector_pop_back(self)

    def erase(self, *args):
        return _osmmapmatch.Point2dVector_erase(self, *args)

    def __init__(self, *args):
        _osmmapmatch.Point2dVector_swiginit(self, _osmmapmatch.new_Point2dVector(*args))

    def push_back(self, x):
        return _osmmapmatch.Point2dVector_push_back(self, x)

    def front(self):
        return _osmmapmatch.Point2dVector_front(self)

    def back(self):
        return _osmmapmatch.Point2dVector_back(self)

    def assign(self, n, x):
        return _osmmapmatch.Point2dVector_assign(self, n, x)

    def resize(self, *args):
        return _osmmapmatch.Point2dVector_resize(self, *args)

    def insert(self, *args):
        return _osmmapmatch.Point2dVector_insert(self, *args)

    def reserve(self, n):
        return _osmmapmatch.Point2dVector_reserve(self, n)

    def capacity(self):
        return _osmmapmatch.Point2dVector_capacity(self)
    __swig_destroy__ = _osmmapmatch.delete_Point2dVector

# Register Point2dVector in _osmmapmatch:
_osmmapmatch.Point2dVector_swigregister(Point2dVector)

class EdgePoint2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _osmmapmatch.EdgePoint2d_swiginit(self, _osmmapmatch.new_EdgePoint2d(*args))
    first = property(_osmmapmatch.EdgePoint2d_first_get, _osmmapmatch.EdgePoint2d_first_set)
    second = property(_osmmapmatch.EdgePoint2d_second_get, _osmmapmatch.EdgePoint2d_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _osmmapmatch.delete_EdgePoint2d

# Register EdgePoint2d in _osmmapmatch:
_osmmapmatch.EdgePoint2d_swigregister(EdgePoint2d)

class EdgePoint2dVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _osmmapmatch.EdgePoint2dVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _osmmapmatch.EdgePoint2dVector___nonzero__(self)

    def __bool__(self):
        return _osmmapmatch.EdgePoint2dVector___bool__(self)

    def __len__(self):
        return _osmmapmatch.EdgePoint2dVector___len__(self)

    def __getslice__(self, i, j):
        return _osmmapmatch.EdgePoint2dVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _osmmapmatch.EdgePoint2dVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _osmmapmatch.EdgePoint2dVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _osmmapmatch.EdgePoint2dVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _osmmapmatch.EdgePoint2dVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _osmmapmatch.EdgePoint2dVector___setitem__(self, *args)

    def pop(self):
        return _osmmapmatch.EdgePoint2dVector_pop(self)

    def append(self, x):
        return _osmmapmatch.EdgePoint2dVector_append(self, x)

    def empty(self):
        return _osmmapmatch.EdgePoint2dVector_empty(self)

    def size(self):
        return _osmmapmatch.EdgePoint2dVector_size(self)

    def swap(self, v):
        return _osmmapmatch.EdgePoint2dVector_swap(self, v)

    def begin(self):
        return _osmmapmatch.EdgePoint2dVector_begin(self)

    def end(self):
        return _osmmapmatch.EdgePoint2dVector_end(self)

    def rbegin(self):
        return _osmmapmatch.EdgePoint2dVector_rbegin(self)

    def rend(self):
        return _osmmapmatch.EdgePoint2dVector_rend(self)

    def clear(self):
        return _osmmapmatch.EdgePoint2dVector_clear(self)

    def get_allocator(self):
        return _osmmapmatch.EdgePoint2dVector_get_allocator(self)

    def pop_back(self):
        return _osmmapmatch.EdgePoint2dVector_pop_back(self)

    def erase(self, *args):
        return _osmmapmatch.EdgePoint2dVector_erase(self, *args)

    def __init__(self, *args):
        _osmmapmatch.EdgePoint2dVector_swiginit(self, _osmmapmatch.new_EdgePoint2dVector(*args))

    def push_back(self, x):
        return _osmmapmatch.EdgePoint2dVector_push_back(self, x)

    def front(self):
        return _osmmapmatch.EdgePoint2dVector_front(self)

    def back(self):
        return _osmmapmatch.EdgePoint2dVector_back(self)

    def assign(self, n, x):
        return _osmmapmatch.EdgePoint2dVector_assign(self, n, x)

    def resize(self, *args):
        return _osmmapmatch.EdgePoint2dVector_resize(self, *args)

    def insert(self, *args):
        return _osmmapmatch.EdgePoint2dVector_insert(self, *args)

    def reserve(self, n):
        return _osmmapmatch.EdgePoint2dVector_reserve(self, n)

    def capacity(self):
        return _osmmapmatch.EdgePoint2dVector_capacity(self)
    __swig_destroy__ = _osmmapmatch.delete_EdgePoint2dVector

# Register EdgePoint2dVector in _osmmapmatch:
_osmmapmatch.EdgePoint2dVector_swigregister(EdgePoint2dVector)

class RealVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _osmmapmatch.RealVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _osmmapmatch.RealVector___nonzero__(self)

    def __bool__(self):
        return _osmmapmatch.RealVector___bool__(self)

    def __len__(self):
        return _osmmapmatch.RealVector___len__(self)

    def __getslice__(self, i, j):
        return _osmmapmatch.RealVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _osmmapmatch.RealVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _osmmapmatch.RealVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _osmmapmatch.RealVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _osmmapmatch.RealVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _osmmapmatch.RealVector___setitem__(self, *args)

    def pop(self):
        return _osmmapmatch.RealVector_pop(self)

    def append(self, x):
        return _osmmapmatch.RealVector_append(self, x)

    def empty(self):
        return _osmmapmatch.RealVector_empty(self)

    def size(self):
        return _osmmapmatch.RealVector_size(self)

    def swap(self, v):
        return _osmmapmatch.RealVector_swap(self, v)

    def begin(self):
        return _osmmapmatch.RealVector_begin(self)

    def end(self):
        return _osmmapmatch.RealVector_end(self)

    def rbegin(self):
        return _osmmapmatch.RealVector_rbegin(self)

    def rend(self):
        return _osmmapmatch.RealVector_rend(self)

    def clear(self):
        return _osmmapmatch.RealVector_clear(self)

    def get_allocator(self):
        return _osmmapmatch.RealVector_get_allocator(self)

    def pop_back(self):
        return _osmmapmatch.RealVector_pop_back(self)

    def erase(self, *args):
        return _osmmapmatch.RealVector_erase(self, *args)

    def __init__(self, *args):
        _osmmapmatch.RealVector_swiginit(self, _osmmapmatch.new_RealVector(*args))

    def push_back(self, x):
        return _osmmapmatch.RealVector_push_back(self, x)

    def front(self):
        return _osmmapmatch.RealVector_front(self)

    def back(self):
        return _osmmapmatch.RealVector_back(self)

    def assign(self, n, x):
        return _osmmapmatch.RealVector_assign(self, n, x)

    def resize(self, *args):
        return _osmmapmatch.RealVector_resize(self, *args)

    def insert(self, *args):
        return _osmmapmatch.RealVector_insert(self, *args)

    def reserve(self, n):
        return _osmmapmatch.RealVector_reserve(self, n)

    def capacity(self):
        return _osmmapmatch.RealVector_capacity(self)
    __swig_destroy__ = _osmmapmatch.delete_RealVector

# Register RealVector in _osmmapmatch:
_osmmapmatch.RealVector_swigregister(RealVector)

class HypothesisVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _osmmapmatch.HypothesisVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _osmmapmatch.HypothesisVector___nonzero__(self)

    def __bool__(self):
        return _osmmapmatch.HypothesisVector___bool__(self)

    def __len__(self):
        return _osmmapmatch.HypothesisVector___len__(self)

    def __getslice__(self, i, j):
        return _osmmapmatch.HypothesisVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _osmmapmatch.HypothesisVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _osmmapmatch.HypothesisVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _osmmapmatch.HypothesisVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _osmmapmatch.HypothesisVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _osmmapmatch.HypothesisVector___setitem__(self, *args)

    def pop(self):
        return _osmmapmatch.HypothesisVector_pop(self)

    def append(self, x):
        return _osmmapmatch.HypothesisVector_append(self, x)

    def empty(self):
        return _osmmapmatch.HypothesisVector_empty(self)

    def size(self):
        return _osmmapmatch.HypothesisVector_size(self)

    def swap(self, v):
        return _osmmapmatch.HypothesisVector_swap(self, v)

    def begin(self):
        return _osmmapmatch.HypothesisVector_begin(self)

    def end(self):
        return _osmmapmatch.HypothesisVector_end(self)

    def rbegin(self):
        return _osmmapmatch.HypothesisVector_rbegin(self)

    def rend(self):
        return _osmmapmatch.HypothesisVector_rend(self)

    def clear(self):
        return _osmmapmatch.HypothesisVector_clear(self)

    def get_allocator(self):
        return _osmmapmatch.HypothesisVector_get_allocator(self)

    def pop_back(self):
        return _osmmapmatch.HypothesisVector_pop_back(self)

    def erase(self, *args):
        return _osmmapmatch.HypothesisVector_erase(self, *args)

    def __init__(self, *args):
        _osmmapmatch.HypothesisVector_swiginit(self, _osmmapmatch.new_HypothesisVector(*args))

    def push_back(self, x):
        return _osmmapmatch.HypothesisVector_push_back(self, x)

    def front(self):
        return _osmmapmatch.HypothesisVector_front(self)

    def back(self):
        return _osmmapmatch.HypothesisVector_back(self)

    def assign(self, n, x):
        return _osmmapmatch.HypothesisVector_assign(self, n, x)

    def resize(self, *args):
        return _osmmapmatch.HypothesisVector_resize(self, *args)

    def insert(self, *args):
        return _osmmapmatch.HypothesisVector_insert(self, *args)

    def reserve(self, n):
        return _osmmapmatch.HypothesisVector_reserve(self, n)

    def capacity(self):
        return _osmmapmatch.HypothesisVector_capacity(self)
    __swig_destroy__ = _osmmapmatch.delete_HypothesisVector

# Register HypothesisVector in _osmmapmatch:
_osmmapmatch.HypothesisVector_swigregister(HypothesisVector)

class NodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _osmmapmatch.NodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _osmmapmatch.NodeVector___nonzero__(self)

    def __bool__(self):
        return _osmmapmatch.NodeVector___bool__(self)

    def __len__(self):
        return _osmmapmatch.NodeVector___len__(self)

    def __getslice__(self, i, j):
        return _osmmapmatch.NodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _osmmapmatch.NodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _osmmapmatch.NodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _osmmapmatch.NodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _osmmapmatch.NodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _osmmapmatch.NodeVector___setitem__(self, *args)

    def pop(self):
        return _osmmapmatch.NodeVector_pop(self)

    def append(self, x):
        return _osmmapmatch.NodeVector_append(self, x)

    def empty(self):
        return _osmmapmatch.NodeVector_empty(self)

    def size(self):
        return _osmmapmatch.NodeVector_size(self)

    def swap(self, v):
        return _osmmapmatch.NodeVector_swap(self, v)

    def begin(self):
        return _osmmapmatch.NodeVector_begin(self)

    def end(self):
        return _osmmapmatch.NodeVector_end(self)

    def rbegin(self):
        return _osmmapmatch.NodeVector_rbegin(self)

    def rend(self):
        return _osmmapmatch.NodeVector_rend(self)

    def clear(self):
        return _osmmapmatch.NodeVector_clear(self)

    def get_allocator(self):
        return _osmmapmatch.NodeVector_get_allocator(self)

    def pop_back(self):
        return _osmmapmatch.NodeVector_pop_back(self)

    def erase(self, *args):
        return _osmmapmatch.NodeVector_erase(self, *args)

    def __init__(self, *args):
        _osmmapmatch.NodeVector_swiginit(self, _osmmapmatch.new_NodeVector(*args))

    def push_back(self, x):
        return _osmmapmatch.NodeVector_push_back(self, x)

    def front(self):
        return _osmmapmatch.NodeVector_front(self)

    def back(self):
        return _osmmapmatch.NodeVector_back(self)

    def assign(self, n, x):
        return _osmmapmatch.NodeVector_assign(self, n, x)

    def resize(self, *args):
        return _osmmapmatch.NodeVector_resize(self, *args)

    def insert(self, *args):
        return _osmmapmatch.NodeVector_insert(self, *args)

    def reserve(self, n):
        return _osmmapmatch.NodeVector_reserve(self, n)

    def capacity(self):
        return _osmmapmatch.NodeVector_capacity(self)
    __swig_destroy__ = _osmmapmatch.delete_NodeVector

# Register NodeVector in _osmmapmatch:
_osmmapmatch.NodeVector_swigregister(NodeVector)

BUSWAY_FILTER = _osmmapmatch.BUSWAY_FILTER
busway_filter = _osmmapmatch.busway_filter
TRAIN_FILTER = _osmmapmatch.TRAIN_FILTER
train_filter = _osmmapmatch.train_filter
TRAM_FILTER = _osmmapmatch.TRAM_FILTER
tram_filter = _osmmapmatch.tram_filter
SUBWAY_FILTER = _osmmapmatch.SUBWAY_FILTER
subway_filter = _osmmapmatch.subway_filter
class Point2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = property(_osmmapmatch.Point2d_x_get, _osmmapmatch.Point2d_x_set)
    y = property(_osmmapmatch.Point2d_y_get, _osmmapmatch.Point2d_y_set)

    def __init__(self, *args):
        _osmmapmatch.Point2d_swiginit(self, _osmmapmatch.new_Point2d(*args))
    __swig_destroy__ = _osmmapmatch.delete_Point2d

# Register Point2d in _osmmapmatch:
_osmmapmatch.Point2d_swigregister(Point2d)

class CoordinateProjector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, proj_string):
        _osmmapmatch.CoordinateProjector_swiginit(self, _osmmapmatch.new_CoordinateProjector(proj_string))

    def __call__(self, latitude, longitude):
        return _osmmapmatch.CoordinateProjector___call__(self, latitude, longitude)

    def inverse(self, x, y):
        return _osmmapmatch.CoordinateProjector_inverse(self, x, y)
    __swig_destroy__ = _osmmapmatch.delete_CoordinateProjector

# Register CoordinateProjector in _osmmapmatch:
_osmmapmatch.CoordinateProjector_swigregister(CoordinateProjector)

WayRoleIgnore = _osmmapmatch.WayRoleIgnore
WayRoleOneWay = _osmmapmatch.WayRoleOneWay
WayRoleTwoWay = _osmmapmatch.WayRoleTwoWay
class OsmGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    graph = property(_osmmapmatch.OsmGraph_graph_get, _osmmapmatch.OsmGraph_graph_set)
    node_coordinates = property(_osmmapmatch.OsmGraph_node_coordinates_get, _osmmapmatch.OsmGraph_node_coordinates_set)
    id_to_vertex = property(_osmmapmatch.OsmGraph_id_to_vertex_get, _osmmapmatch.OsmGraph_id_to_vertex_set)
    edge_index = property(_osmmapmatch.OsmGraph_edge_index_get, _osmmapmatch.OsmGraph_edge_index_set)

    def __init__(self, filename, proj, get_way_role):
        _osmmapmatch.OsmGraph_swiginit(self, _osmmapmatch.new_OsmGraph(filename, proj, get_way_role))

    def get_vertex_point(self, vertex):
        return _osmmapmatch.OsmGraph_get_vertex_point(self, vertex)

    def get_vertex_id(self, vertex):
        return _osmmapmatch.OsmGraph_get_vertex_id(self, vertex)

    def get_edge_coordinates(self):
        return _osmmapmatch.OsmGraph_get_edge_coordinates(self)
    __swig_destroy__ = _osmmapmatch.delete_OsmGraph

# Register OsmGraph in _osmmapmatch:
_osmmapmatch.OsmGraph_swigregister(OsmGraph)

class PositionHypothesis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    parent = property(_osmmapmatch.PositionHypothesis_parent_get, _osmmapmatch.PositionHypothesis_parent_set)
    timestamp = property(_osmmapmatch.PositionHypothesis_timestamp_get, _osmmapmatch.PositionHypothesis_timestamp_set)
    total_likelihood = property(_osmmapmatch.PositionHypothesis_total_likelihood_get, _osmmapmatch.PositionHypothesis_total_likelihood_set)
    measurement_likelihood = property(_osmmapmatch.PositionHypothesis_measurement_likelihood_get, _osmmapmatch.PositionHypothesis_measurement_likelihood_set)
    transition_likelihood = property(_osmmapmatch.PositionHypothesis_transition_likelihood_get, _osmmapmatch.PositionHypothesis_transition_likelihood_set)
    measurement_error = property(_osmmapmatch.PositionHypothesis_measurement_error_get, _osmmapmatch.PositionHypothesis_measurement_error_set)
    edge = property(_osmmapmatch.PositionHypothesis_edge_get, _osmmapmatch.PositionHypothesis_edge_set)
    edge_offset = property(_osmmapmatch.PositionHypothesis_edge_offset_get, _osmmapmatch.PositionHypothesis_edge_offset_set)
    subpath = property(_osmmapmatch.PositionHypothesis_subpath_get, _osmmapmatch.PositionHypothesis_subpath_set)
    position = property(_osmmapmatch.PositionHypothesis_position_get, _osmmapmatch.PositionHypothesis_position_set)
    measurement = property(_osmmapmatch.PositionHypothesis_measurement_get, _osmmapmatch.PositionHypothesis_measurement_set)

    def position2d(self):
        return _osmmapmatch.PositionHypothesis_position2d(self)

    def measurement2d(self):
        return _osmmapmatch.PositionHypothesis_measurement2d(self)

    def subpath_nodes(self, graph):
        return _osmmapmatch.PositionHypothesis_subpath_nodes(self, graph)

    def __init__(self):
        _osmmapmatch.PositionHypothesis_swiginit(self, _osmmapmatch.new_PositionHypothesis())
    __swig_destroy__ = _osmmapmatch.delete_PositionHypothesis

# Register PositionHypothesis in _osmmapmatch:
_osmmapmatch.PositionHypothesis_swigregister(PositionHypothesis)


def gaussian_logpdf(x, m, s):
    return _osmmapmatch.gaussian_logpdf(x, m, s)
class StateLikelihoodModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def measurement(self, m, p):
        return _osmmapmatch.StateLikelihoodModel_measurement(self, m, p)

    def transition(self, parent, next, path, path_length):
        return _osmmapmatch.StateLikelihoodModel_transition(self, parent, next, path, path_length)
    __swig_destroy__ = _osmmapmatch.delete_StateLikelihoodModel

    def best_transition_still_possible(self, measured_dist, distance):
        return _osmmapmatch.StateLikelihoodModel_best_transition_still_possible(self, measured_dist, distance)

# Register StateLikelihoodModel in _osmmapmatch:
_osmmapmatch.StateLikelihoodModel_swigregister(StateLikelihoodModel)


def vector_angle(a, b):
    return _osmmapmatch.vector_angle(a, b)
class DrawnGaussianStateModel(StateLikelihoodModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, measurement_std, length_error_std, graph):
        _osmmapmatch.DrawnGaussianStateModel_swiginit(self, _osmmapmatch.new_DrawnGaussianStateModel(measurement_std, length_error_std, graph))

    def measurement(self, m, p):
        return _osmmapmatch.DrawnGaussianStateModel_measurement(self, m, p)

    def transition(self, parent, next, path, path_length):
        return _osmmapmatch.DrawnGaussianStateModel_transition(self, parent, next, path, path_length)

    def best_transition_still_possible(self, measured_length, path_length):
        return _osmmapmatch.DrawnGaussianStateModel_best_transition_still_possible(self, measured_length, path_length)
    __swig_destroy__ = _osmmapmatch.delete_DrawnGaussianStateModel

# Register DrawnGaussianStateModel in _osmmapmatch:
_osmmapmatch.DrawnGaussianStateModel_swigregister(DrawnGaussianStateModel)

class MapMatcher2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    n_outliers = property(_osmmapmatch.MapMatcher2d_n_outliers_get, _osmmapmatch.MapMatcher2d_n_outliers_set)

    def __init__(self, g, state_model, search_radius=100.0):
        _osmmapmatch.MapMatcher2d_swiginit(self, _osmmapmatch.new_MapMatcher2d(g, state_model, search_radius))
    __swig_destroy__ = _osmmapmatch.delete_MapMatcher2d

    def measurement(self, *args):
        return _osmmapmatch.MapMatcher2d_measurement(self, *args)

    def measurements(self, ts, points):
        return _osmmapmatch.MapMatcher2d_measurements(self, ts, points)

    def route_vertex_path(self, path):
        return _osmmapmatch.MapMatcher2d_route_vertex_path(self, path)

    def get_hypothesis_path(self, current):
        return _osmmapmatch.MapMatcher2d_get_hypothesis_path(self, current)

    def best_match_coordinates(self):
        return _osmmapmatch.MapMatcher2d_best_match_coordinates(self)

    def best_match_node_ids(self):
        return _osmmapmatch.MapMatcher2d_best_match_node_ids(self)

    def best_current_hypothesis(self):
        return _osmmapmatch.MapMatcher2d_best_current_hypothesis(self)

    def current_hypotheses(self):
        return _osmmapmatch.MapMatcher2d_current_hypotheses(self)

# Register MapMatcher2d in _osmmapmatch:
_osmmapmatch.MapMatcher2d_swigregister(MapMatcher2d)


def get_random_path(graph, n_waypoints=1):
    return _osmmapmatch.get_random_path(graph, n_waypoints)

def get_shortest_node_path(graph, start, end):
    return _osmmapmatch.get_shortest_node_path(graph, start, end)


